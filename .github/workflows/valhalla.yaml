on:
  workflow_call:
    inputs:
      valhalla_ref:
        type: string
        default: 3.5.1
        description: The valhalla version to build
        required: false
      vcpkg_ref:
        type: string
        default: 2024.10.21
        description: The vcpkg version to use
        required: false

jobs:
  build_macosx:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, macos-13]
    steps:
      - uses: actions/checkout@v4
        with:
          repository: valhalla/valhalla
          ref: ${{ inputs.valhalla_ref }}
          submodules: 'recursive'
      - uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          ref: 2024.10.21
          path: vcpkg
      - name: Cache build
        id: build-cache
        uses: actions/cache@v4
        with:
          path: build/valhalla-${{ inputs.valhalla_ref }}-Darwin.tar.gz
          key: ${{ runner.os }}-${{ runner.arch }}-valhalla-${{ inputs.valhalla_ref }}-${{ github.workflow_sha }}
      - name: Build valhalla
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: |
          set -ex
          brew install automake cmake bash coreutils binutils libtool autoconf automake autoconf-archive pkg-config autoconf python@3.11
          git clone https://github.com/microsoft/vcpkg && git -C vcpkg checkout ${{ inputs.vcpkg_ref }}
          export VCPKG_ROOT=$(pwd)/vcpkg
          ./vcpkg/bootstrap-vcpkg.sh
          if [ "${{ runner.arch }}" == "X64" ]; then
            echo "set(VCPKG_BUILD_TYPE release)" >> vcpkg/triplets/x64-osx.cmake
          else
            brew install vcpkg
            echo "set(VCPKG_BUILD_TYPE release)" >> vcpkg/triplets/arm64-osx.cmake
          fi
          npm install --ignore-scripts
          mkdir build
          # We don't need python bindings
          sed -i.bak '/pybind11/d' vcpkg.json
          # We don't need gdal (we disable compile-time support for it)
          sed -i.bak '/gdal/d' vcpkg.json
          ./vcpkg/vcpkg install
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$PWD/vcpkg/scripts/buildsystems/vcpkg.cmake -DDENABLE_STATIC_LIBRARY_MODULES=ON -DBUILD_SHARED_LIBS=OFF -DDENABLE_GDAL=OFF -DENABLE_SERVICES=OFF
          cmake --build build -- -j"$(nproc)"
          cmake --build build -- package
      - name: Debug output
        if: failure()
        run: |
          git diff
          ls build/vcpkg_installed
          find . -iname '*-err.log' -print -exec cat {} \;
      - name: Upload mac build
        id: upload-mac-build
        uses: actions/upload-artifact@v4
        with:
          name: macosx-build-valhalla-${{ runner.arch }}
          path: |
            build/valhalla-${{ inputs.valhalla_ref }}-Darwin.tar.gz

  combine_macos:
    runs-on: macos-latest
    needs: [build_macosx]
    steps:
      - name: Cache build
        id: build-cache
        uses: actions/cache@v4
        with:
          path: valhalla-${{ inputs.valhalla_ref }}-Darwin.tar.gz
          key: ${{ runner.os }}-fat-valhalla-${{ inputs.valhalla_ref }}-${{ github.workflow_sha }}
      - name: Get macos arm build
        if: steps.build-cache.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v4
        with:
          name: macosx-build-valhalla-ARM64
      - name: Extract arm build
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: |
          mkdir arm64
          tar -xf valhalla-${{ inputs.valhalla_ref }}-Darwin.tar.gz -C arm64
          rm valhalla-${{ inputs.valhalla_ref }}-Darwin.tar.gz
      - name: Get macos x64 build
        if: steps.build-cache.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v4
        with:
          name: macosx-build-valhalla-X64
      - name: Build fat binaries
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: |
          mkdir x86
          tar -xf valhalla-${{ inputs.valhalla_ref }}-Darwin.tar.gz -C x86
          rm valhalla-${{ inputs.valhalla_ref }}-Darwin.tar.gz
          # Now create the fat files
          mkdir fat
          function makefat() {
            echo "${1}"
            echo "${@}"
            file="${1#x86/}"
            file="${file#arm64/}"
            if [ -f "${1}" ]; then
              mkdir -p "fat/${file%/*}"
              # Account for platform specific resource files
              cp "${1}" "fat/${file}"
              lipo -create -output "fat/${file}" "x86/${file}" "arm64/${file}"
            fi
          }
          export -f makefat
          find x86 -type f -exec bash -c 'makefat "${0}"' {} \;
          find arm64 -type f -exec bash -c 'makefat "${0}"' {} \;
          tar -czf valhalla-${{ inputs.valhalla_ref }}-Darwin.tar.gz -C fat/valhalla-${{ inputs.valhalla_ref }}-Darwin .
      - name: Upload mac build
        id: upload-mac-build
        uses: actions/upload-artifact@v4
        with:
          name: macosx-build-valhalla-fat
          path: |
            valhalla-${{ inputs.valhalla_ref }}-Darwin.tar.gz
